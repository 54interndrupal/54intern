<?php

/**
 * @file
 * Generate a PDF for the print_pdf module using the dompdf library.
 *
 * @ingroup print
 */

define('PRINT_PDF_DOMPDF_UNICODE_DEFAULT', 0);
define('PRINT_PDF_DOMPDF_FONT_SUBSETTING_DEFAULT', FALSE);

/**
 * Implements hook_theme().
 */
function print_pdf_dompdf_theme() {
  return array(
    'print_pdf_dompdf_footer' => array(
      'variables' => array('html' => ''),
      'file' => 'print_pdf_dompdf.pages.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function print_pdf_dompdf_menu() {
  $items = array();

  $items['admin/config/user-interface/print/pdf/dompdf'] = array(
    'title' => 'dompdf',
    'description' => 'Configure the dompdf options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_pdf_dompdf_settings'),
    'access arguments'  => array('administer print'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'print_pdf_dompdf.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_requirements().
 */
function print_pdf_dompdf_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that a PDF generation tool is selected
    case 'runtime':
      $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);

      if (!empty($print_pdf_pdf_tool)) {
        $tool = explode('|', $print_pdf_pdf_tool);

        if (is_file($tool[1]) && is_readable($tool[1])) {
          if (basename($tool[1]) == 'dompdf_config.inc.php') {
            $version = _print_pdf_dompdf_version($tool[1]);

            $requirements['print_pdf_tool_version'] = array(
              'title' => $t('Printer, email and PDF versions - PDF generation library'),
              'value' => $t('dompdf') . ' ' . $version,
            );

            if (variable_get('print_pdf_autoconfig', PRINT_PDF_AUTOCONFIG_DEFAULT)) {
              $directory = dirname($tool[1]) . '/lib/fonts';
              if (!is_dir($directory) || !is_writable($directory)) {
                $requirements['print_pdf_tool'] = array(
                  'title' => $t('DOMPDF font cache directory'),
                  'value' => $t('Non-writable permissions'),
                  'description' => $t('You must change the %libdir permissions to be writable, as %lib requires write-access to that directory.', array('%lib' => 'dompdf', '%libdir' => $directory)),
                  'severity' => REQUIREMENT_ERROR,
                );
              }
            }
          }
        }
      }
      break;
  }
  return $requirements;
}

/**
 * Find out the version of the dompdf library
 *
 * @param string $pdf_tool
 *   Filename of the tool to be analysed.
 *
 * @return string
 *   version number of the dompdf library
 */
function _print_pdf_dompdf_version($pdf_tool) {
  require_once(DRUPAL_ROOT . '/' . $pdf_tool);

  // Poor man's way to find dompdf version
  if (!defined('DOMPDF_DIR')) {
    return 'unknown';
  }
  elseif (!defined('DOMPDF_CHROOT')) {
    return '0.5.1';
  }
  elseif (!defined('DOMPDF_FONT_CACHE')) {
    return '0.5.2';
  }
  elseif (!defined('DOMPDF_LOG_OUTPUT_FILE')) {
    return '0.6.0 beta1';
  }
  elseif (!defined('DOMPDF_ADMIN_USERNAME')) {
    return '0.6.0 beta2';
  }
  else {
    return '0.6.0 beta3';
  }
}

/**
 * Implements hook_print_pdf_available_libs_alter().
 */
function print_pdf_dompdf_print_pdf_available_libs_alter(&$pdf_tools) {
  $tools = _print_scan_libs('dompdf', '!^dompdf_config.inc.php$!');

  foreach ($tools as $tool) {
    $pdf_tools['print_pdf_dompdf|' . $tool] = 'dompdf (' . dirname($tool) . ')';
  }
}
